#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -*- mode: python; -*-

from __future__ import print_function

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
from subprocess import call
from sys import exit

description = "Sends AMQP 1.0 request messages to a server"
parser = ArgumentParser(description=description,
                        formatter_class=ArgumentDefaultsHelpFormatter)

impl_names = {
    "javascript": "javascript",
    "js": "javascript",
    "py": "python",
    "python": "python",
}

parser.add_argument("url", metavar="URL", nargs="?",
                    default="localhost:56720/pingpong",
                    help="The destination for ping requests")
parser.add_argument("--count", metavar="INTEGER", type=int, default=0,
                    help="Send INTEGER requests and exit; if 0, send forever")
parser.add_argument("--impl", metavar="NAME",
                    default="python",
                    help="Select the implementation",
                    choices=impl_names.keys())

args = parser.parse_args()

impl = impl_names[args.impl]
command = "pingpong-client-{} '{}' {}".format(impl, args.url, args.count)
return_code = 0

try:
    return_code = call(command, shell=True)
except KeyboardInterrupt:
    pass

exit(return_code)
