#!/usr/bin/env node

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

"use strict";

var container = require("rhea");
var url = process.argv[2]

var sender = null;
var receiver = null;

container.on("connection_open", function(context) {
    sender = context.connection.open_sender("ekko");
    receiver = context.connection.open_receiver({source: {dynamic: true}});
});

container.on("receiver_open", function(context) {
    // if (!sender.credit()) return; XXX ask Gordon about this

    setInterval(function() {
        //console.dir(receiver);
        
        var request = {
            // receiver.source_address(), // XXX this seems to be missing
            // XXX I don't like properties as an extra level every where
            properties: {
                reply_to: receiver.remote.attach.source.address,
            },
            body: "ekko"
        };

        console.log("CLIENT: Sending request " + format_message(request));

        sender.send(request);
    }, 1000)
});

container.on("message", function(context) {
    console.log("CLIENT: Received response " + context.message.body);
});

function format_message(message) {
    return "Message{reply_to=\"" + message.properties.reply_to + "\", body=\"" + message.body + "\"}"
}

console.log("CLIENT: Starting");

container.connect({"port": 5672});
