#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# -*- mode: python; -*-

from __future__ import print_function

import sys

from proton import generate_uuid, Message
from proton.handlers import MessagingHandler
from proton.reactor import Container

def log(message, *args):
    message = message.format(*args)
    print("SERVER: {}".format(message))

class ServerHandler(MessagingHandler):
    def __init__(self, url, max_count):
        super(ServerHandler, self).__init__()
        
        self.url = url
        self.max_count = max_count

        self.count = 0
        self.response_links_by_address = dict()

        self.acceptor = None
    
    def on_start(self, event):
        log("Listening on {}", self.url)

        self.acceptor = event.container.listen(self.url)

    def on_link_opening(self, event):
        if event.link.is_sender:
            if event.link.remote_source and event.link.remote_source.dynamic:
                response_address = str(generate_uuid())
                event.link.source.address = response_address

                self.response_links_by_address[response_address] = event.link

    def on_message(self, event):
        log("Received request {}", event.message)

        response_address = event.message.reply_to
        
        try:
            response_link = self.response_links_by_address[response_address]
        except KeyError:
            raise Error("No response link")

        response = Message(event.message.body.upper())
        response.correlation_id = event.message.id

        log("Sending response {}", response)

        response_link.send(response)

        if self.max_count != 0:
            self.count += 1
            
            if self.count >= self.max_count:
                log("Closing connection")
                event.connection.close()
                self.acceptor.close()
        
url = sys.argv[1]
count = int(sys.argv[2])
handler = ServerHandler(url, count)
container = Container(handler)

try:
    container.run()
except KeyboardInterrupt:
    pass
