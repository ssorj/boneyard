#!/usr/bin/env node

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

"use strict";

var container = require("rhea");
var url = process.argv[2]

// XXX The server.js example is doing this.  Why?
//
// I know why now: it's a brokered example.  The use of "server" in
// two senses is a point of confusion.
//
//container.on('connection_open', function (context) {
//    context.connection.open_receiver('ekko');
//});
//
// XXX note in passing: server.js has an unused senders var

container.on("sender_open", function(context) {
    console.dir(context.sender);
    console.dir(context.sender.remote.attach);

    // XXX I can't figure out how to accomplish this, and it's not
    // being done for me
    if (context.sender.remote.attach.source.dynamic) {
        context.sender.local.attach.source.address = container.generate_uuid();
    }
});

container.on("receiver_open", function(context) {
    console.dir(context.receiver);
});

container.on("message", function(context) {
    var request = context.message;

    console.log("SERVER: Received request " + format_message(request));

    var reply_to = request.properties.reply_to;
});

function format_message(message) {
    return "Message{reply_to=\"" + message.properties.reply_to + "\", body=\"" + message.body + "\"}"
}

console.log("SERVER: Starting");
    
container.listen({"port": 5672});
