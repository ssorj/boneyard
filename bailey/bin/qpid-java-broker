#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import atexit
import os
import shutil
import subprocess
import sys
import tempfile

from argparse import ArgumentParser

def normalize(path):
    path = os.path.normpath(path)
    path = os.path.expandvars(path)
    return path

default = os.path.join("/", "opt", "qpid-java-broker")
home_dir = os.environ.get("QPID_HOME", default)

default = os.path.join(home_dir, "work")
work_dir = os.environ.get("QPID_WORK", default)

classpath = os.path.join(home_dir, "lib", "qpid-all.jar")
temp_dir = tempfile.mkdtemp()

description = "The Qpid Java AMQP messaging broker"
parser = ArgumentParser(description)

help = """
Emit log messages at LEVEL and above; the value must be one of
'fatal', 'error', 'warn', 'info', 'debug', or 'trace'; the default is
'warn'
"""

choices = ("fatal", "error", "warn", "info", "debug", "trace")

parser.add_argument("--log-level", metavar="LEVEL", default="warn",
                    help=help, choices=choices)

log4j_xml = """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="null"
    threshold="null">
  <appender class="org.apache.log4j.ConsoleAppender" name="console">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d %-5p [%t] (%c{{2}}) - %m%n"/>
    </layout>
  </appender>
  <root>
    <level value="{log_level}"/>
    <appender-ref ref="console"/>
  </root>
</log4j:configuration>"""

def write_log4j_config(**kwargs):
    path = os.path.join(temp_dir, "log4j.xml")
    content = log4j_xml.format(**kwargs)

    with open(path, "w") as f:
        f.write(content)

    return path

def cleanup():
    shutil.rmtree(temp_dir, ignore_errors=True)

atexit.register(cleanup)

def main():
    args = parser.parse_args()

    log4j_config = write_log4j_config(log_level=args.log_level)

    if not os.path.isdir(work_dir):
        os.makedirs(work_dir)

    command = (
        "/usr/bin/java",
        "-classpath", classpath,
        "-DQPID_HOME={}".format(home_dir),
        "-DQPID_WORK={}".format(work_dir),
        "-Dderby.stream.error.file={}/derby.log".format(work_dir),
        "org.apache.qpid.server.Main",
        "--logconfig", log4j_config,
        )

    #    "-Dlog4j.debug",

    subprocess.check_call(command)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
