/* Generated By:JavaCC: Do not edit this line. LentilParser.java */
package lentil;

import java.io.*;
import java.lang.reflect.*;
import java.net.*;
import java.util.*;

public class LentilParser implements LentilParserConstants {
    public static final LentilPackage parse(final URL url) {
        if (url == null) throw new IllegalArgumentException();

        final LentilPackage lpackage;

        try {
            lpackage = parse(new InputStreamReader(url.openStream()));
        } catch (IOException ioe) {
            throw new IllegalStateException(ioe);
        }

        return lpackage;
    }

    public static final LentilPackage parse(final Reader reader) {
        try {
            return new LentilParser(reader).parse();
        } catch (ParseException pe) {
            throw new IllegalStateException(pe);
        }
    }

    static String dequote(final String quoted) {
        return quoted.substring(0, quoted.length() - 1).substring(1);
    }

  final public LentilPackage parse() throws ParseException {
    LentilPackage lpackage;
    lpackage = jjPackage();
    jj_consume_token(0);
        {if (true) return lpackage;}
    throw new Error("Missing return statement in function");
  }

  final public LentilPackage jjPackage() throws ParseException {
    LentilPackage lpackage;
    jj_consume_token(PACKAGE);
    token = jj_consume_token(ID);
        lpackage = LentilPackage.getPackage(token.image);
    jj_consume_token(SEMI);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jjClass(lpackage);
    }
    jj_consume_token(0);
        {if (true) return lpackage;}
    throw new Error("Missing return statement in function");
  }

  final public void jjClass(final LentilPackage lpackage) throws ParseException {
    LentilClass lclass;
    jj_consume_token(CLASS);
    token = jj_consume_token(ID);
        final Class jclass = lpackage.getJavaClass(token.image);
        lclass = new LentilClass(jclass, lpackage);
    token = jj_consume_token(ID);
        lclass.setTable(token.image);
    jj_consume_token(LCURLY);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIELD:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jjField(lclass);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KEY:
      jjKey(lclass);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(RCURLY);
  }

  final public void jjField(final LentilClass lclass) throws ParseException {
    LentilField lfield;
    jj_consume_token(FIELD);
    token = jj_consume_token(ID);
        final Field jfield = lclass.getJavaField(token.image);
        lfield = new LentilField(jfield, lclass);
    token = jj_consume_token(ID);
        lfield.setColumn(token.image);
    jj_consume_token(SEMI);
  }

  final public void jjKey(final LentilClass lclass) throws ParseException {
    jj_consume_token(KEY);
    token = jj_consume_token(ID);
        lclass.setKeyField(lclass.getField(token.image));
    token = jj_consume_token(ID);
        lclass.setKeySequence(token.image);
    jj_consume_token(SEMI);
  }

  public LentilParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x4000,0x8000,0x10000,};
   }

  public LentilParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LentilParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public LentilParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LentilParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public LentilParser(LentilParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(LentilParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[23];
    for (int i = 0; i < 23; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
