/* Generated By:JavaCC: Do not edit this line. WidgetParser.java */
package wooly.lang;

import java.io.*;
import java.lang.reflect.*;
import java.net.*;
import java.util.*;
import wooly.*;
import wooly.widgets.*;

public final class WidgetParser implements WidgetParserConstants {
//     /**
//      * For testing.
//      */
//     public static final void main(final String[] args) throws ParseException {
//         final WidgetParser parser = new WidgetParser(System.in);

//         parser.parse().print();
//     }

    private static int m_count = 0;

    static String dequote(final String quoted) {
        return quoted.substring(0, quoted.length() - 1).substring(1);
    }

  final public Node parse() throws ParseException {
    Node node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PAGE:
      node = Page();
      break;
    case WIDGET:
    case TEXT:
    case MODES:
    case TABS:
      node = Node(null);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(0);
        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public String String() throws ParseException {
    String string;
    token = jj_consume_token(STRING);
        string = dequote(token.image);
        {if (true) return string;}
    throw new Error("Missing return statement in function");
  }

  final public String Url() throws ParseException {
    String url;
    jj_consume_token(URL);
    jj_consume_token(LPAREN);
    url = String();
    jj_consume_token(RPAREN);
        {if (true) return url;}
    throw new Error("Missing return statement in function");
  }

  final public String Identifier() throws ParseException {
    String id;
    token = jj_consume_token(ID);
        id = token.image;
        {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public PageNode Page() throws ParseException {
    final PageNode page = new PageNode();
    jj_consume_token(PAGE);
    page.name = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      page.title = String();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLY:
      NodeBlock(page);
      break;
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return page;}
    throw new Error("Missing return statement in function");
  }

  final public Node Node(final Node parent) throws ParseException {
    final Node node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEXT:
      node = Text();
      break;
    case WIDGET:
      node = ReflectionWidget();
      break;
    case MODES:
      node = Modes();
      break;
    case TABS:
      node = Tabs();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        node.parent = parent;
        parent.children.add(node);

        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public void NodeBlock(final Node parent) throws ParseException {
    Node node;
    jj_consume_token(LCURLY);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WIDGET:
      case TEXT:
      case MODES:
      case TABS:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      node = Node(parent);
    }
    jj_consume_token(RCURLY);
  }

  final public TextNode Text() throws ParseException {
    final TextNode text = new TextNode();
    text.name = "node" + m_count++;
    jj_consume_token(TEXT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      text.name = Identifier();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      text.text = String();
      break;
    case URL:
      text.url = Url();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMI);
        {if (true) return text;}
    throw new Error("Missing return statement in function");
  }

  final public ReflectionWidgetNode ReflectionWidget() throws ParseException {
    final ReflectionWidgetNode widget = new ReflectionWidgetNode();
    jj_consume_token(WIDGET);
    widget.type = Identifier();
    widget.name = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLY:
      NodeBlock(widget);
      break;
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return widget;}
    throw new Error("Missing return statement in function");
  }

  final public ModesNode Modes() throws ParseException {
    final ModesNode modes = new ModesNode();
    jj_consume_token(MODES);
    modes.name = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLY:
      NodeBlock(modes);
      break;
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return modes;}
    throw new Error("Missing return statement in function");
  }

  final public TabsNode Tabs() throws ParseException {
    final TabsNode tabs = new TabsNode();
    jj_consume_token(TABS);
    tabs.name = Identifier();
    tabs.smodes = Identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLY:
      jj_consume_token(LCURLY);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_2;
        }
        Tab(tabs);
      }
      jj_consume_token(RCURLY);
      break;
    case SEMI:
      jj_consume_token(SEMI);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return tabs;}
    throw new Error("Missing return statement in function");
  }

  final public TabNode Tab(final TabsNode tabs) throws ParseException {
    final TabNode tab = new TabNode();
    String id;
    id = Identifier();
        tab.smode = tabs.smodes + "." + id;
    jj_consume_token(COLON);
    tab.ntab = Node(tabs);
        tab.parent = tabs;
        tabs.children.add(tab);

        {if (true) return tab;}
    throw new Error("Missing return statement in function");
  }

  public WidgetParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xf8000,0x400000,0x140,0xe8000,0xe8000,0x800000,0x600000,0x140,0x140,0x800000,0x140,};
   }

  public WidgetParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WidgetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public WidgetParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WidgetParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public WidgetParser(WidgetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  public void ReInit(WidgetParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[28];
    for (int i = 0; i < 28; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
