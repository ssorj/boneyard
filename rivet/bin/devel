#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function

import argparse
import distutils.sysconfig
import os
import shutil
import subprocess
import sys

class Environment(object):
    def __init__(self):
        self.source_dir = None
        self.build_dir = None
        self.install_dir = None

    def print(self):
        print("{:18}  {}".format("Source directory:", self.source_dir))
        print("{:18}  {}".format("Build directory:", self.build_dir))
        print("{:18}  {}".format("Install directory:", self.install_dir))

def main():
    env = Environment()

    try:
        env.source_dir = os.environ["DEVEL_SOURCE_DIR"]
        env.build_dir = os.environ["DEVEL_BUILD_DIR"]
        env.install_dir = os.environ["DEVEL_INSTALL_DIR"]
    except KeyError:
        sys.exit("Run 'source config.sh' first")

    description = "High-level functions for the development environment"

    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("commands", nargs="+")

    args = parser.parse_args()

    for command_name in args.commands:
        function_name = "command_{}".format(command_name)

        try:
            function = globals()[function_name]
        except KeyError:
            sys.exit("Command '{}' is unknown".format(command_name))

        function(env)

def command_status(env):
    env.print()

def command_clean(env):
    if os.path.exists(env.build_dir):
        shutil.rmtree(env.build_dir)

def command_install(env):
    cmake_file = os.path.join(env.source_dir, "CMakeLists.txt")
    distutils_file = os.path.join(env.source_dir, "setup.py")

    if os.path.exists(cmake_file):
        cmake_install(env)
    elif os.path.exists(distutils_file):
        python_install(env)
    else:
        raise Exception("Unknown build tool")

def cmake_install(env):
    if not os.path.exists(env.build_dir):
        os.makedirs(env.build_dir)

    os.chdir(env.build_dir)

    args = env.install_dir, env.source_dir
    cmd = "cmake -DCMAKE_INSTALL_PREFIX={} {}".format(*args)

    subprocess.check_call(cmd, shell=True)
    subprocess.check_call("make -j4", shell=True)
    subprocess.check_call("make install", shell=True)

def python_install(env):
    cmd = "python setup.py install --prefix {}".format(env.install_dir)
    subprocess.check_call(cmd, shell=True)

def command_get_python_path(env):
    plat_path = distutils.sysconfig.get_python_lib \
                (plat_specific=True, prefix=env.install_dir)
    path = distutils.sysconfig.get_python_lib(prefix=env.install_dir)

    print("{}:{}".format(plat_path, path))

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
