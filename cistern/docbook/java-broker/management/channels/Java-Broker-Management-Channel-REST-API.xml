<?xml version="1.0" encoding="utf-8"?>
<!--

 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.

-->

<section id="Java-Broker-Management-Channel-REST-API">
  <title>REST API</title>
  <para> This section provides a brief overview of the REST interfaces, which can be used directly to
    monitor and manage the Broker instance.</para>

  <section id="Java-Broker-Management-Channel-REST-API-Introduction">
    <title>Introduction</title>
    <para>The REST interface support traditional REST model which uses the GET method requests to
    retrieve the information about broker configured objects, DELETE method requests to delete the
    configured object, PUT to create or update the configured object and POST to perform the
    configured objects updates and creation.</para>
    <para>The REST API is versioned with the version number built into the URL. The general form of
    the URL is <literal>/api/&lt;version&gt;</literal> where &lt;version&gt; is a major model version prefixed with "v", for example, v3.
    For convenience the alias <literal>latest</literal> (<literal>/api/latest</literal>) signifies the latest supported version.
    There are also some ancillary services under URI <literal>/service</literal>.</para>
  </section>

  <section id="Java-Broker-Management-Channel-REST-API-URI">
    <title>REST interfaces</title>
    <para>The following REST interfaces are implemented on Qpid Broker</para>
    <table>
      <title>Rest services</title>
      <tgroup cols="2">
        <thead>
          <row>
            <entry>REST Service URI</entry>
            <entry>Description</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/broker</para></listitem>
                <listitem><para>/api/&lt;version&gt;/broker</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages broker instance attributes and provides current values of Broker attributes and children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/virtualhostnode</para></listitem>
                <listitem><para>/api/&lt;version&gt;/virtualhostnode</para></listitem>
                <listitem><para>/api/latest/virtualhostnode/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/virtualhostnode/&lt;virtual host node name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
                <para>Manages(creates/deletes/updates) Virtual Host Node(s) on Broker and provides current values of Virtual Host Node attributes and its children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/virtualhost</para></listitem>
                <listitem><para>/api/&lt;version&gt;/virtualhost</para></listitem>
                <listitem><para>/api/latest/virtualhost/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/virtualhost/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/virtualhost/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/virtualhost/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) Virtual Host on Virtual Host Node and provides current values of Virtual Host attributes and its children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/queue</para></listitem>
                <listitem><para>/api/&lt;version&gt;/queue</para></listitem>
                <listitem><para>/api/latest/queue/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/queue/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/queue/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/queue/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/latest/queue/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;queue name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/queue/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;queue name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) Queue(s) on Virtual Host and provides current values of Queue attributes and its children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/exchange</para></listitem>
                <listitem><para>/api/&lt;version&gt;/exchange</para></listitem>
                <listitem><para>/api/latest/exchange/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/exchange/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/exchange/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/exchange/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/latest/exchange/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;exchange name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/exchange/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;exchange name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) Exchanges(s) on Virtual Host and provides current values of Exchange attributes and its children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/binding</para></listitem>
                <listitem><para>/api/&lt;version&gt;/binding</para></listitem>
                <listitem><para>/api/latest/binding/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/binding/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/binding/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/binding/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/latest/binding/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;exchange name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/binding/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;exchange name&gt;</para></listitem>
                <listitem><para>/api/latest/binding/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;exchange name&gt;/&lt;queue name&gt;/&lt;binding name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/binding/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;exchange name&gt;/&lt;queue name&gt;/&lt;binding name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes) Binding(s) of Queue to Exchange and provides current values of Binding attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/connection</para></listitem>
                <listitem><para>/api/&lt;version&gt;/connection</para></listitem>
                <listitem><para>/api/latest/connection/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/connection/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/connection/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/connection/&lt;virtual host node name&gt;/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/connection/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;connection name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/connection/&lt;virtual host node name&gt;/&lt;virtual host node name&gt;/&lt;connection name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages (deletes) Connection(s) on VirtualHost and provides current values of Connection attributes and its Sessions</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/session</para></listitem>
                <listitem><para>/api/&lt;version&gt;/session</para></listitem>
                <listitem><para>/api/latest/session/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/session/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/session/&lt;virtual host node name&gt;/&lt;virtual host name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/session/&lt;virtual host node name&gt;/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/session/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;connection name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/session/&lt;virtual host node name&gt;/&lt;virtual host node name&gt;/&lt;connection name</para></listitem>
                <listitem><para>/api/latest/session/&lt;virtual host node name&gt;/&lt;virtual host name&gt;/&lt;connection name&gt;/&lt;session name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/session/&lt;virtual host node name&gt;/&lt;virtual host node name&gt;/&lt;connection name&gt;/&lt;session name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages (deletes) Session(s) on Connection and provides values of Session attributes and its Consumers</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/port</para></listitem>
                <listitem><para>/api/&lt;version&gt;/port</para></listitem>
                <listitem><para>/api/latest/port/&lt;port name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/port/&lt;port name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) Port(s) on Broker and provides the information about current values of Port attributes and its children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/authenticationprovider</para></listitem>
                <listitem><para>/api/&lt;version&gt;/authenticationprovider</para></listitem>
                <listitem><para>/api/latest/authenticationprovider/&lt;authentication provider name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/authenticationprovider/&lt;authentication provider name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) AuthenticationProvider(s) on Broker and provides the information about current values of AuthenticationProvider attributes and its children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/user</para></listitem>
                <listitem><para>/api/&lt;version&gt;/user</para></listitem>
                <listitem><para>/api/latest/user/&lt;authentication provider name&gt;/&lt;user name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/user/&lt;authentication provider name&gt;/&lt;user name&gt;</para></listitem>
                <listitem><para>/api/latest/user/&lt;authentication provider name&gt;/&lt;user name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/user/&lt;authentication provider name&gt;/&lt;user name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) User(s) on AuthenticationProvider and provides the information about current values of User attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/accesscontrolprovider</para></listitem>
                <listitem><para>/api/&lt;version&gt;/accesscontrolprovider</para></listitem>
                <listitem><para>/api/latest/accesscontrolprovider/&lt;access control provider name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/accesscontrolprovider/&lt;access control provider name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) AccessControlProvider on Broker and provides the information about current values of AccessControlProvider attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/groupprovider</para></listitem>
                <listitem><para>/api/&lt;version&gt;/groupprovider</para></listitem>
                <listitem><para>/api/latest/groupprovider/&lt;group provider name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/groupprovider/&lt;group provider name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) GroupProvider on Broker and provides the information about current values of GroupProvider attributes and its children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/group</para></listitem>
                <listitem><para>/api/&lt;version&gt;/group</para></listitem>
                <listitem><para>/api/latest/group/&lt;group provider name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/group/&lt;group provider name&gt;</para></listitem>
                <listitem><para>/api/latest/group/&lt;group provider name&gt;/&lt;group name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/group/&lt;group provider name&gt;/&lt;group name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) Group on GroupProvider and provides the information about current values of Group attributes and its children</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/groupmember</para></listitem>
                <listitem><para>/api/&lt;version&gt;/groupmember</para></listitem>
                <listitem><para>/api/latest/groupmember/&lt;group provider name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/groupmember/&lt;group provider name&gt;</para></listitem>
                <listitem><para>/api/latest/groupmember/&lt;group provider name&gt;/&lt;group name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/groupmember/&lt;group provider name&gt;/&lt;group name&gt;</para></listitem>
                <listitem><para>/api/latest/groupmember/&lt;group provider name&gt;/&lt;group name&gt;/&lt;user name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/groupmember/&lt;group provider name&gt;/&lt;group name&gt;/&lt;user name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes) GroupMember(s) on Group and provides the information about current values of GroupMember attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/keystore</para></listitem>
                <listitem><para>/api/&lt;version&gt;/keystore</para></listitem>
                <listitem><para>/api/latest/keystore/&lt;key store name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/keystore/&lt;key store name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) KeyStore(s) on Broker and provides the information about current values of KeyStore attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/truststore</para></listitem>
                <listitem><para>/api/&lt;version&gt;/truststore</para></listitem>
                <listitem><para>/api/latest/truststore/&lt;trust store name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/truststore/&lt;trust store name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) TrustStore(s) on Broker and provides the information about current values of TrustStore attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/preferencesprovider</para></listitem>
                <listitem><para>/api/&lt;version&gt;/preferencesprovider</para></listitem>
                <listitem><para>/api/latest/preferencesprovider/&lt;authentication provider name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/preferencesprovider/&lt;authentication provider name&gt;</para></listitem>
                <listitem><para>/api/latest/preferencesprovider/&lt;authentication provider name&gt;/&lt;preferences provider name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/preferencesprovider/&lt;authentication provider name&gt;/&lt;preferences provider name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) PreferencesProvider on AuthenticationProvider and provides the information about current values of PreferencesProvider attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/plugin</para></listitem>
                <listitem><para>/api/&lt;version&gt;/plugin</para></listitem>
                <listitem><para>/api/latest/plugin/&lt;plugin name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/plugin/&lt;plugin name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) Plugin(s) on Broker and provides the information about current values of Plugin attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <itemizedlist>
                <listitem><para>/api/latest/remotereplicationnode</para></listitem>
                <listitem><para>/api/&lt;version&gt;/remotereplicationnode</para></listitem>
                <listitem><para>/api/latest/remotereplicationnode/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/remotereplicationnode/&lt;virtual host node name&gt;</para></listitem>
                <listitem><para>/api/latest/remotereplicationnode/&lt;virtual host node name&gt;/&lt;replication node name&gt;</para></listitem>
                <listitem><para>/api/&lt;version&gt;/remotereplicationnode/&lt;virtual host node name&gt;/&lt;replication node name&gt;</para></listitem>
              </itemizedlist>
            </entry>
            <entry>
              <para>Manages(creates/deletes/updates) RemoteReplicationNode(s) on VirtualHostNode and provides the information about current values of RemoteReplicationNode attributes</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>/service/sasl</para>
            </entry>
            <entry>Sasl authentication. Retrieves user current authentication status and broker supported SASL mechanisms (GET). Authenticates user using supported SASL mechanisms (PUT requests)</entry>
          </row>
          <row>
            <entry>
              <para>/service/logout</para>
            </entry>
            <entry>Log outs user (GET only)</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
  <section id="Java-Broker-Management-Channel-REST-API-Create">
    <title>Configured Object creation</title>
    <para>Methods PUT or POST can be used to create ConfiguredObject.</para>
    <para>
      ConfiguredObject can be created by submitting PUT request against ConfiguredObject full URI (the one ending with configured object name)
      or by submitting PUT/POST request against parent URI.
      The request encoding should be json (application/json) and request body should contain attributes values in json format.
      On successful completion of operation a response should be returned having response status code set to 201 and response header "Location" set to ConfiguredObject full URI.
      If object with a such name/id already exist and POST/PUT requests is made against parent URI,
      an error response should be returned having response code 409 (conflict) and body containing the json with the reason of operation failure.
      If object with a such name/id already exist and and PUT request is made against ConfiguredObject full URI,
      then ConfiguredObject update should be performed and http status code 200 should be returned.
      If ConfiguredObject cannot be created because of validation failure(s) the response should have http status code set 422 (Unprocessible Entity)
      and body should contain json with the reason of operation failure. On any other failure to create ConfiguredObject the response should have status code set to 400 (Bad Request)
      and payload should contain a json with error explaining the exact reason of failure.
    </para>
    <example>
      <title>Examples of REST calls for Queue creation</title>
      <para>
      To create Queue with name "my-queue" on a virtual host with name "vh" (which is contained within virtual host node with name "vhn") either of the following requests should be made:
      </para>
      <screen><![CDATA[PUT /api/latest/queue/vhn/vh HTTP/1.1]]></screen>
      <screen><![CDATA[POST /api/latest/queue/vhn/vh HTTP/1.1]]></screen>
      <screen><![CDATA[PUT /api/latest/queue/vhn/vh/my-queue HTTP/1.1]]></screen>
      <para>
      Response code 201 should be returned on successful queue creation. Response header "Location" should be set to "/api/latest/queue/test/my-queue".
      If queue with name "my-queue" already exists and either of 2 first requests above were used, an error response with response code 409 (conflict) and body containing json with message
      that queue exists should be returned. If queue with name "my-queue" exists and last request is used, then Queue update should occur.
      </para>
    </example>
  </section>
  <section id="Java-Broker-Management-Channel-REST-API-Update">
    <title>Configured Object update</title>
    <para>Methods PUT or POST can be used to update ConfiguredObject.</para>
    <para>
      ConfiguredObject can be updated by submitting PUT or POST request against ConfiguredObject full URI (the one ending with configured object name).
      The request encoding should be json (application/json) and request body should contain a ConfiguredObject json (with all or only modified attributes).
      On successful completion of operation a response code 200 should be returned.
      If ConfiguredObject does not exists and PUT method is used, such object should be created (201 response will be returned in this case).
      If ConfiguredObject does not exists and POST method is used, an error response should be returned having response status code 404 and payload with json explaining the problem.
      If any error occur on update, a response with response code 400 or 422 or 404 should be sent back to the client containing json body with error details.
    </para>
    <example>
      <title>Examples of REST calls for Queue update</title>
      <para>To update Queue with name "my-queue"  on a virtual host with name "vh" (contained in virtual host node with name "vhn") either of the following requests can be made:</para>
      <screen><![CDATA[POST /api/latest/queue/vhn/vh/my-queue HTTP/1.1]]></screen>
      <screen><![CDATA[POST /api/latest/queue/vhn/vh/my-queue HTTP/1.1]]></screen>
    </example>
  </section>
  <section id="Java-Broker-Management-Channel-REST-API-Delete">
    <title>Configured Object deletion</title>
    <para>Method DELETE can be used to delete ConfiguredObject. Alternatively, ConfiguredObject can be deleted with update request having desiredState attribute set to value "DELETED".
      POST or PUT methods can be used in this case.</para>
    <para>On successful completion of operation a response code 200 should be returned.</para>
    <para>With DELETE method object ConfiguredObject in following ways:</para>
    <itemizedlist>
      <listitem>
        <para>by submitting DELETE request using ConfiguredObject full URI (the one ending with configured object name)</para>
      </listitem>
      <listitem>
        <para>by submitting DELETE request using parent URI and providing parameters having the same names as children attributes, for example, id, name, etc.
          Multiple children can be deleted in a such way. Many "id" parameters can be specified in such requests. Only children with matching attribute values will be deleted.</para>
      </listitem>
    </itemizedlist>
    <example>
      <title>Examples of REST calls for Queue deletion</title>
      <para>To delete Queue with name "my-queue"  on a virtual host with name "vh" (contained in virtual host node with name "vhn") either of the following requests can be made:</para>
      <screen><![CDATA[DELETE /api/latest/queue/vhn/vh/my-queue HTTP/1.1]]></screen>
      <screen><![CDATA[DELETE /api/latest/queue/vhn/vh?name=my-queue HTTP/1.1]]></screen>
      <screen><![CDATA[DELETE /api/latest/queue/vhn/vh?id=real-queue-id HTTP/1.1]]></screen>
    </example>
  </section>
  <section id="Java-Broker-Management-Channel-REST-API-Get">
    <title>Retrieving Configured Object details</title>
    <para>Method GET is used to retrieve ConfiguredObject attributes values and children hierarchy.</para>
    <para>A particular ConfiguredObject  details can be retrieved using full ConfiguredObject URI (the one ending with configured object name)</para>
    <para>A collection of ConfiguredObjects  can be retrieved using parent URI. Request parameters
      (having the same name as attributes) can be used to filter the returned configured objects.</para>
    <para>The REST URI (/api/latest/&gt;category&lt;/*) are hierarchical. It is permitted to replace REST URI elements with an
      "asterisks" in GET requests to denote all object of a particular type. Additionally, trailing
      object type in the URL hierarchy can be omitted. In this case GET request will return all of the
      object underneath of the current object.</para>
    <para>For example, for binding URL <literal>http://localhost:8080/api/latest/binding/&lt;vhost
        node&gt;/&lt;vhost&gt;/&lt;exchange&gt;/&lt;queue&gt;/&lt;binding&gt;</literal> replacing of
      <literal>&lt;exchange&gt;</literal> with "asterisks"
      (<literal>http://localhost:8080/api/&lt;ver&gt;/binding/&lt;vhost
        node&gt;/&lt;vhost&gt;/*/&lt;queue&gt;/&lt;binding&gt;</literal>) will result in the GET
      response containing the list of bindings for all of the exchanges in the virtualhost having the
      given name and given queue.</para>
    <para>If <literal>&lt;binding&gt;</literal> and <literal>&lt;queue&gt;</literal> are omitted in
      binding REST URL (<literal>http://localhost:8080/api/&lt;ver&gt;/binding/&lt;vhost
        node&gt;/&lt;vhost&gt;/&lt;exchangename&gt;</literal>) the GET request will result in
      returning all bindings for all queues for the given exchange in the virtual host. </para>
    <para>Additional parameters supported in GET requests:</para>
    <variablelist>
      <varlistentry>
        <term>depth</term><listitem><para>To restrict the depth of hierarchy of configured objects to return in response</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>actuals</term><listitem><para>If set to "true" attribute actual values are returned instead of effective</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>includeSysContext</term><listitem><para>If set to "true" all system context variables are returned</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>inheritedActuals</term><listitem><para>If set to "true" actual values for all inherited context is returned.</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>oversize</term><listitem><para>Sets the maximum length for values of over-sized attributes to trim</para></listitem>
      </varlistentry>
      <varlistentry>
        <term>extractInitialConfig</term><listitem><para>If set to "true", the returned json can be used as initial configuration.</para></listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section id="Java-Broker-Management-Channel-REST-API-Status-Codes">
    <title>HTTP status codes returned by REST interfaces</title>
    <table>
    <title>HTTP status codes returned by REST interfaces</title>
    <tgroup cols="2">
    <thead>
      <row>
        <entry>Status code</entry>
        <entry>Description</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <para>200</para>
        </entry>
        <entry>
          <para>REST request is successfully completed. This status code can be returned by update, delete and get requests.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>201</para>
        </entry>
        <entry>
          <para>New configured object is created. It is returned by REST PUT and POST requests for creation of configured objects.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>400</para>
        </entry>
        <entry>
          <para>REST request cannot be performed due to errors in request.
            It can be returned from create, update and delete requests.
            The details of a problem are provided in the response payload in json format.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>401</para>
        </entry>
        <entry>
          <para>The request requires user authentication</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>403</para>
        </entry>
        <entry>
          <para>Execution of request is not allowed due to failure to authorize user operation.</para>
        </entry>
      </row>
      <row>
        <entry>
          <para>404</para>
        </entry>
        <entry>
          <para>
            The requested configured object cannot be found. This status code can be returned from POST update requests if configured object does not exist.
            The reason for the status code is provided in the response payload in json format.
          </para>
        </entry>
      </row>
      <row>
        <entry>
          <para>409</para>
        </entry>
        <entry>
          <para>The request can not be performed because its execution can create conflicts in the broker.
            This status code can be returned from POST/PUT create requests against parent URI if configured object with requested name or id already exists.
            The status code 409 can also be returned if removal or update of configured object can violate system integrity.
            The reason for the status code is provided in the response payload in json format.
          </para>
        </entry>
      </row>
      <row>
        <entry>
          <para>422</para>
        </entry>
        <entry>
          <para>The request can not be performed because provided information either incomplete or invalid.
            This status code can be returned from create or update requests.
            The reason for the status code is provided in the response payload in json format.</para>
        </entry>
      </row>
    </tbody>
    </tgroup>
    </table>
  </section>
  <section id="Java-Broker-Management-Channel-REST-API-Examples">
    <title>Examples of REST requests with curl</title>
  <example>
    <title>Examples of queue creation using curl (authenticating as user admin):</title>
    <programlisting><![CDATA[
#create a durable queue
curl --user admin -X PUT  -d '{"durable":true}' http://localhost:8080/api/latest/queue/<vhostnode name>/<vhostname>/<queuename>
#create a durable priority queue
curl --user admin -X PUT  -d '{"durable":true,"type":"priority"}' http://localhost:8080/api/latest/queue/<vhostnode name>/<vhostname>/<queuename>
            ]]></programlisting>
  </example>
  <example>
    <title>Example of binding a queue to an exchange using curl</title>
    <programlisting><![CDATA[
curl --user admin -X PUT  -d '{}' http://localhost:8080/api/latest/binding/<vhostnode name>/<vhostname>/<exchangename>/<queue-name>/<binding-name>
            ]]></programlisting>
  </example>
  <para> NOTE: These curl examples utilise unsecure HTTP transport. To use the examples it is first
    necessary enable Basic authentication for HTTP within the HTTP Management Configuration (it is
    off by default). For details see <xref linkend="Java-Broker-Management-Managing-Plugin-HTTP"/>
  </para>
  </section>
</section>
