#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function

import os
import sys

default = os.path.normpath("@croquet_home@")
home = os.environ.get("CROQUET_HOME", default)

sys.path.append(os.path.join(home, "python"))

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter, ArgumentDefaultsHelpFormatter
from subprocess import check_call

def main():
    description = "Croquet is a tool for testing the performance of " \
                  "messaging APIs"

    epilog = "operations:\n" \
             "  send                 Send messages\n" \
             "  receive              Receive messages\n" \
             "\n" \
             "apis:\n" \
             "\n" \
             "languages:\n" \
             "\n" \
             "typical usage:\n" \
             "  % qpidd --auth no &\n" \
             "  % qpid-config add queue test\n" \
             "  % croquet receive &\n" \
             "  % croquet send\n" \
             "\n" \

    class _HelpFormatter \
          (RawDescriptionHelpFormatter, ArgumentDefaultsHelpFormatter):
        pass

    parser = ArgumentParser(description=description, epilog=epilog,
                            formatter_class=_HelpFormatter)
    parser.add_argument("operation", metavar="OPERATION")
    parser.add_argument("--api", metavar="API",
                        help="Use the API implementation", default="qma")
    parser.add_argument("--language", metavar="LANGUAGE",
                        help="Use the LANGUAGE implementation",
                        default="python")
    parser.add_argument("--connections", metavar="COUNT",
                        help="Create COUNT connections", default=10, type=int)
    parser.add_argument("--sessions", metavar="COUNT",
                        help="Create COUNT sessions", default=100, type=int)
    parser.add_argument("--links", metavar="COUNT",
                        help="Create COUNT links", default=1000, type=int)
    parser.add_argument("--messages", metavar="COUNT",
                        help="Send or receive COUNT messages",
                        default=10000, type=int)
    parser.add_argument("--bytes", metavar="COUNT",
                        help="Send or receive COUNT bytes",
                        default=1000000, type=int)

    args = parser.parse_args()

    if args.connections > args.sessions:
        parser.error("There cannot be fewer sessions than connections")

    if args.sessions > args.links:
        parser.error("There cannot be fewer links than sessions")

    if args.links > args.messages:
        parser.error("There cannot be fewer sessions than messages")

    if args.messages > args.bytes:
        parser.error("There cannot be fewer bytes than messages")

    command = "{}/croquet-{}-{}-{} {} {} {} {} {}".format \
              (home, args.operation, args.api, args.language,
               args.connections, args.sessions, args.links,
               args.messages, args.bytes)

    check_call(command, shell=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
