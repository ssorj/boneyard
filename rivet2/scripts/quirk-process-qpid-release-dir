#!/usr/bin/env python
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function

import re

from plano import *

release_dir = ARGS[1]

# Generate Java binaries

binaries_dir = make_dir(join(release_dir, "binaries"))
names = list_dir(release_dir, "qpid-java-*.tar.gz")

def make_java_binaries(release_dir, binaries_dir, archive_name):
    temp_dir = make_temp_dir()

    extract_archive(join(release_dir, archive_name), temp_dir)

    archive_dir = join(temp_dir, first_name(temp_dir))

    with working_dir(archive_dir):
        call("mvn --quiet -DskipTests package")

    for file in find(archive_dir, "*-bin.tar.gz"):
        copy(file, binaries_dir)

for name in names:
    if re.match(r"qpid-java-([^-]+-[^-]+|[^-]+).tar.gz", name):
        make_java_binaries(release_dir, binaries_dir, name)
        break
else:
    raise Exception()

for name in names:
    if re.match(r"qpid-java-qmf-tools-([^-]+-[^-]+|[^-]+).tar.gz", name):
        make_java_binaries(release_dir, binaries_dir, name)
        break
else:
    raise Exception()

# Remove files we don't use for Qpid releases

for name in list_dir(release_dir, "*.revision"):
    remove(join(release_dir, name))

remove(find_only_one(release_dir, "qpid-dispatch-*.tar.gz"))
remove(find_only_one(release_dir, "qpid-jms-*.tar.gz"))
remove(find_only_one(release_dir, "qpid-proton-*.tar.gz"))
remove(find_only_one(binaries_dir, "qpid-perftests-*-bin.tar.gz"))

# Generate checksums

with working_dir(release_dir):
    for name in list_dir(".", "*.tar.gz"):
        call("md5sum {} > {}.md5", name, name)
        call("sha1sum {} > {}.sha1", name, name)

with working_dir(join(release_dir, "binaries")):
    for name in list_dir(".", "*.tar.gz"):
        call("md5sum {} > {}.md5", name, name)
        call("sha1sum {} > {}.sha1", name, name)
