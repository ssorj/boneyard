#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from qpid.peer import *

#
# Sending peer
#

home = Home()
home.sync_send = False
home.auto_settle = False

conn1 = TcpConnector(home, "alpha.example.net")
conn2 = TcpConnector(home, "beta.example.net", "5673")

home.create_target("queue1", conn1)
home.create_target("queue2", conn2)

try:
    conn1.connect()
except ConnectionError as e:
    print "Encountered a connection error:", e
    raise e

message = Message()
deliveries = set()
count = 10

while count > 0:
    event = home.next_event()

    if event.target:
        count -= 1

        message.content = count

        delivery = event.target.send(message)

        deliveries.add(delivery)

while deliveries:
    event = home.next_event()

    if event.delivery:
        if event.delivery.disposition is ACCEPTED:
            delivery.settle()
            deliveries.remove(event.delivery)

#
# Receiving peer
#

home = Home()
home.sync_acknowledge = False

home.create_source("queue1")
home.create_source("queue2")

message = Message()
deliveries = set()
count = 10

while count > 0:
    event = home.next_event(Source)

    delivery = event.source.receive(message)

    print message.content

    deliveries.add(delivery)

    count -= 1

    delivery.acknowledge(ACCEPTED)

while deliveries:
    event = home.next_event(Delivery)

    if event.delivery.settled:
        deliveries.remove(event.delivery)
